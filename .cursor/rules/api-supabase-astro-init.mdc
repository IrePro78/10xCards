---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: false
---

# Supabase Next Initialization

This document provides a reproducible guide to create the necessary file structure for integrating Supabase with your Next project.

## Prerequisites

- Your project should use Next, TypeScript 5 and Tailwind 4.
- Install the `@supabase/supabase-js` package.
- Ensure that `/supabase/config.toml` exists
- Ensure that a file `/src/db/database.types.ts` exists and contains the correct type definitions for your database.

IMPORTANT: Check prerequisites before perfoming actions below. If they're not met, stop and ask a user for the fix.

## File Structure and Setup

### 1. Supabase Client Initialization

Create the file `/src/db/supabase.client.ts` with the following content:

```ts
import { createClient } from '@supabase/supabase-js';
import type { Database } from '../../db/database.types';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL as string;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY as string;

export const supabaseClient = createClient<Database>(supabaseUrl, supabaseAnonKey);
```

This file initializes the Supabase client using the environment variables `SUPABASE_URL` and `SUPABASE_KEY`.


### 2. Middleware Setup

Create the file `/src/middleware/index.ts` with the following content:

```ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { supabaseClient } from './lib/supabase/client';

export async function middleware(request: NextRequest) {
  // Umieszczamy klienta Supabase w kontekście
  const response = NextResponse.next({
    request: {
      headers: new Headers(request.headers),
    },
  });
  
  return response;
}

export const config = {
  matcher: ['/api/:path*', '/dashboard/:path*'],
};
```

This middleware adds the Supabase client to the Next context locals, making it available throughout your application.


### 3. TypeScript Environment Definitions

Create the file `src/env.d.ts` with the following content:

```ts
import type { SupabaseClient } from '@supabase/supabase-js';
import type { Database } from '../db/database.types';

declare global {
  namespace NodeJS {
    interface ProcessEnv {
      NEXT_PUBLIC_SUPABASE_URL: string;
      NEXT_PUBLIC_SUPABASE_ANON_KEY: string;
    }
  }
}

// Można również dodać rozszerzenie dla Next.js Request
declare module 'next/server' {
  interface NextRequest {
    supabase?: SupabaseClient<Database>;
  }
}
```

This file augments the global types to include the Supabase client on the Next.js `App.Locals` object, ensuring proper typing throughout your application.
