---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
# AI Rules for {app-name}

{project-description}

## Tech Stack

- Next 15
- TypeScript 5
- Tailwind 4
- Shadcn/ui

## Project Structure

When introducing changes to the project, always follow the directory structure below:

- `./src` - Source code shared across the project
- `./app` - App Router-based routing structure (layouts, pages, etc.)
- `./app/api` - API endpoints (route handlers)
- `./app/components` - View-specific components used only within pages or layouts (e.g., sections, charts)
- `./src/db` - Supabase clients and types
- `./src/types/*.ts` - Shared types for backend and frontend (Entities, DTOs)
- `./src/middleware/index.ts` - Next.js middleware logic
- `./src/components` - Reusable client-side components (static or dynamic)
- `./src/components/ui` - Atomic UI components from Shadcn/ui (e.g., Button, Input)
- `./src/lib/*.ts` - Services, utilities, and helper functions
- `./public` - Static public assets

When modifying the directory structure, always update this section.

## Coding practices

### Guidelines for clean code

- Use feedback from linters to improve the code when making changes.
- Prioritize error handling and edge cases.
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deeply nested if statements.
- Place the happy path last in the function for improved readability.
- Avoid unnecessary else statements; use if-return pattern instead.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Consider using custom error types or error factories for consistent error handling.