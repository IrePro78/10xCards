# Supabase Auth Integration with Next.js

## Core Requirements

1. Use `@supabase/ssr` package (NOT auth-helpers)
2. Use ONLY `getAll` and `setAll` for cookie management
3. NEVER use individual `get`, `set`, or `remove` cookie methods
4. Implement proper session management with middleware based on JWT (Supabase Auth)

## Installation

```bash
npm install @supabase/ssr @supabase/supabase-js
```

## Environment Variables

Create `.env` file with required Supabase credentials:

```env
NEXT_PUBLIC_SUPABASE_URL=your_project_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_anon_key
```

For better TypeScript support, update `src/env.d.ts`:

```typescript
/// <reference types="next" />

declare namespace NodeJS {
	interface ProcessEnv {
		NEXT_PUBLIC_SUPABASE_URL: string;
		NEXT_PUBLIC_SUPABASE_ANON_KEY: string;
	}
}
```

## Implementation Steps

### 1. Create OR Extend Supabase Server Instance

W `src/db/server.client.ts`:

```typescript
import { createServerClient } from '@supabase/ssr';
import { cookies } from 'next/headers';
import type { Database } from '@/types/database.types';

export async function createClient() {
	const cookieStore = cookies();

	return createServerClient<Database>(
		process.env.NEXT_PUBLIC_SUPABASE_URL!,
		process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
		{
			cookies: {
				getAll() {
					return cookieStore.getAll();
				},
				setAll(cookiesToSet) {
					try {
						cookiesToSet.forEach(({ name, value, options }) =>
							cookieStore.set(name, value, options),
						);
					} catch {
						// Metoda setAll została wywołana z Server Component.
						// Można to zignorować, jeśli middleware odświeża
						// sesje użytkownika.
					}
				},
			},
		},
	);
}
```

### 2. Implement OR Extend Authentication Middleware

W `src/middleware/index.ts`:

```typescript
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { createServerClient } from '@supabase/ssr';

const PUBLIC_PATHS = [
	'/login',
	'/register',
	'/forgot-password',
	'/reset-password',
];

export async function middleware(request: NextRequest) {
	// Tworzymy nową odpowiedź z przekazanym requestem
	let response = NextResponse.next({
		request,
	});

	response.headers.set('x-middleware-cache', 'no-cache');

	const supabase = createServerClient(
		process.env.NEXT_PUBLIC_SUPABASE_URL!,
		process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
		{
			cookies: {
				getAll() {
					return request.cookies.getAll();
				},
				setAll(cookiesToSet) {
					cookiesToSet.forEach(({ name, value, options }) =>
						request.cookies.set(name, value),
					);
					response = NextResponse.next({
						request,
					});
					response.headers.set('x-middleware-cache', 'no-cache');
					cookiesToSet.forEach(({ name, value, options }) =>
						response.cookies.set(name, value, options),
					);
				},
			},
		},
	);

	// WAŻNE: Nie umieszczaj kodu między createServerClient a supabase.auth.getUser()
	// Prosty błąd może spowodować trudne do debugowania problemy z losowym wylogowywaniem użytkowników

	const {
		data: { user },
	} = await supabase.auth.getUser();

	// Jeśli użytkownik nie jest zalogowany i próbuje dostać się do chronionej ścieżki
	if (!user && !PUBLIC_PATHS.includes(request.nextUrl.pathname)) {
		return NextResponse.redirect(new URL('/login', request.url));
	}

	// Jeśli użytkownik jest zalogowany i próbuje dostać się do strony logowania/rejestracji
	if (user && PUBLIC_PATHS.includes(request.nextUrl.pathname)) {
		return NextResponse.redirect(new URL('/generate', request.url));
	}

	// WAŻNE: Zwracamy response z zachowanymi ciasteczkami
	return response;
}

export const config = {
	matcher: [
		/*
		 * Dopasuj wszystkie ścieżki żądań z wyjątkiem tych zaczynających się od:
		 * - _next/static (pliki statyczne)
		 * - _next/image (pliki optymalizacji obrazów)
		 * - favicon.ico (plik favicon)
		 * - .*\\.(?:svg|png|jpg|jpeg|gif|webp)$ (pliki graficzne)
		 */
		'/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
	],
};
```

### 3. Create Auth Route Handlers

In `app/api/auth/route.ts`:

```typescript
import { createSupabaseServerClient } from '@/db/supabase.client';
import { NextResponse } from 'next/server';

export async function POST(request: Request) {
	const { email, password } = await request.json();
	const supabase = createSupabaseServerClient();

	const { data, error } = await supabase.auth.signInWithPassword({
		email,
		password,
	});

	if (error) {
		return NextResponse.json(
			{ error: error.message },
			{ status: 400 },
		);
	}

	return NextResponse.json({ user: data.user });
}
```

### 4. Protect Server Components

In `app/protected/page.tsx`:

```typescript
import { createSupabaseServerClient } from '@/db/supabase.client'
import { redirect } from 'next/navigation'

export default async function ProtectedPage() {
  const supabase = createSupabaseServerClient()
  const { data: { user } } = await supabase.auth.getUser()

  if (!user) {
    redirect('/auth/login')
  }

  return (
    <div>
      <h1>Protected Page</h1>
      <p>Welcome {user.email}!</p>
    </div>
  )
}
```

## Security Best Practices

- Set proper cookie options (httpOnly, secure, sameSite)
- Never expose Supabase integration & keys in client-side components
- Validate all user input server-side
- Use proper error handling and logging

## Common Pitfalls

1. DO NOT use individual cookie methods (get/set/remove)
2. DO NOT import from @supabase/auth-helpers-nextjs
3. DO NOT skip the auth.getUser() call in middleware
4. DO NOT modify cookie handling logic
5. Always handle auth state changes properly
