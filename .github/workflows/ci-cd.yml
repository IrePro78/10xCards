name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'

jobs:
  # Linting i formatowanie
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run check

      - name: Check TypeScript
        run: npx tsc --noEmit

  # Testy jednostkowe (bez E2E)
  unit-tests:
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage (excluding E2E)
        run: npm run test:coverage -- --exclude="**/e2e.test.ts" --exclude="**/flashcard-generation.test.ts"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage/
          verbose: true

  # Testy E2E (osobny job)
  e2e-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npm run e2e

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Testy z Supabase (z secretami)
  supabase-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Debug environment variables
        run: |
          echo "Checking secrets availability..."
          if [ -n "${{ secrets.SUPABASE_URL }}" ]; then
            echo "✅ SUPABASE_URL is set (length: ${#SUPABASE_URL})"
          else
            echo "❌ SUPABASE_URL is NOT set"
          fi

          if [ -n "${{ secrets.SUPABASE_PUBLIC_KEY }}" ]; then
            echo "✅ SUPABASE_PUBLIC_KEY is set (length: ${#SUPABASE_PUBLIC_KEY})"
          else
            echo "❌ SUPABASE_PUBLIC_KEY is NOT set"
          fi

      - name: Run Supabase tests
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_PUBLIC_KEY: ${{ secrets.SUPABASE_PUBLIC_KEY }}
          E2E_USERNAME_ID: ${{ secrets.E2E_USERNAME_ID }}
          E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
          E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
        run: |
          # Stwórz plik .env z secretami
          cat > .env << EOF
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_PUBLIC_KEY=${{ secrets.SUPABASE_PUBLIC_KEY }}
          E2E_USERNAME_ID=${{ secrets.E2E_USERNAME_ID }}
          E2E_USERNAME=${{ secrets.E2E_USERNAME }}
          E2E_PASSWORD=${{ secrets.E2E_PASSWORD }}
          EOF

          # Uruchom testy
          npm run test -- --run src/test/examples/e2e.test.ts src/test/examples/flashcard-generation.test.ts

  # Build i deployment
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 7
